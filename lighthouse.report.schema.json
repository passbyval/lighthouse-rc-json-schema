{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "title": "Lighthouse Report JSON Schema",
  "type": "object",
  "$defs": {
    "configSettings": {
      "properties": {
        "additionalTraceCategories": {
          "description": "Comma-delimited list of trace categories to include.",
          "type": "string"
        },
        "auditMode": {
          "description": "Flag indicating the run should only audit.",
          "type": ["string", "boolean"]
        },
        "blankPage": {
          "description": "The URL to use for the \"blank\" neutral page in between navigations. Defaults to `about:blank`.",
          "type": "string"
        },
        "blockedUrlPatterns": {
          "description": "List of URL patterns to block.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "channel": {
          "description": "How Lighthouse was run, e.g. from the Chrome extension or from the npm module",
          "type": "string"
        },
        "clearStorageTypes": {
          "description": "Flag indicating which kinds of browser storage should be reset for the audit.\nCookies are not cleared by default, so the user isn't logged out.\nindexeddb, websql, and localstorage are not cleared by default to prevent\nloss of potentially important data.\nhttps://chromedevtools.github.io/debugger-protocol-viewer/tot/Storage/#type-StorageType",
          "items": {
            "$ref": "#/$defs/storageType"
          },
          "type": "array"
        },
        "cpuQuietThresholdMs": {
          "description": "The number of milliseconds to wait between long tasks until the page should be considered loaded.",
          "type": "number"
        },
        "debugNavigation": {
          "description": "Flag indicating that Lighthouse should pause after page load to wait for the user's permission to continue the audit.",
          "type": "boolean"
        },
        "disableFullPageScreenshot": {
          "description": "Disables collection of the full page screenshot, which can be rather large and possibly leave the page in an undesirable state.",
          "type": "boolean"
        },
        "disableStorageReset": {
          "description": "Flag indicating that the browser storage should not be reset for the audit.",
          "type": "boolean"
        },
        "emulatedUserAgent": {
          "description": "User Agent string to apply, `false` to not change the host's UA string, or `true` to use Lighthouse's default UA string.",
          "type": ["string", "boolean"]
        },
        "extraHeaders": {
          "type": "object",
          "description": "List of extra HTTP Headers to include."
        },
        "formFactor": {
          "description": "How Lighthouse should interpret this run in regards to scoring performance metrics and skipping mobile-only tests in desktop. Must be set even if throttling/emulation is being applied outside of Lighthouse.",
          "enum": ["desktop", "mobile"],
          "type": "string"
        },
        "gatherMode": {
          "description": "Flag indicating the run should only gather.",
          "type": ["string", "boolean"]
        },
        "ignoreStatusCode": {
          "description": "Disables failing on 404 status code, and instead issues a warning",
          "type": "boolean"
        },
        "locale": {
          "$ref": "#/$defs/locale",
          "description": "The locale to use for the output."
        },
        "maxWaitForFcp": {
          "description": "The maximum amount of time to wait for a page content render, in ms. If no content is rendered within this limit, the run is aborted with an error.",
          "type": "number"
        },
        "maxWaitForLoad": {
          "description": "The maximum amount of time to wait for a page to load, in ms.",
          "type": "number"
        },
        "networkQuietThresholdMs": {
          "description": "The number of milliseconds to wait between high priority network requests or 3 simulataneous requests before the page should be considered loaded.",
          "type": "number"
        },
        "onlyAudits": {
          "description": "If present, the run should only conduct this list of audits.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "onlyCategories": {
          "description": "If present, the run should only conduct this list of categories.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "output": {
          "anyOf": [
            {
              "items": {
                "$ref": "#/$defs/utputMode"
              },
              "type": "array"
            },
            {
              "enum": ["csv", "html", "json"],
              "type": "string"
            }
          ],
          "description": "The type(s) of report output to be produced."
        },
        "pauseAfterFcpMs": {
          "description": "The number of milliseconds to wait after FCP until the page should be considered loaded.",
          "type": "number"
        },
        "pauseAfterLoadMs": {
          "description": "The number of milliseconds to wait after the load event until the page should be considered loaded.",
          "type": "number"
        },
        "recomputedLanternData": {
          "$ref": "#/$defs/recomputedLanternData",
          "description": "Precomputed lantern estimates to use instead of observed analysis."
        },
        "screenEmulation": {
          "description": "Screen emulation properties (width, height, dpr, mobile viewport) to apply or an object of `{disabled: true}` if Lighthouse should avoid applying screen emulation. If either emulation is applied outside of Lighthouse, or it's being run on a mobile device, it typically should be set to disabled. For desktop, we recommend applying consistent desktop screen emulation.",
          "properties": {
            "deviceScaleFactor": {
              "description": "Overriding device scale factor value. 0 disables the override.",
              "type": "number"
            },
            "disabled": {
              "description": "Whether screen emulation is disabled. If true, the other emulation settings are ignored.",
              "type": "boolean"
            },
            "height": {
              "description": "Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
              "type": "number"
            },
            "mobile": {
              "description": "Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.",
              "type": "boolean"
            },
            "width": {
              "description": "Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.",
              "type": "number"
            }
          },
          "type": "object"
        },
        "skipAboutBlank": {
          "description": "If set to true, will skip the initial navigation to about:blank.",
          "type": "boolean"
        },
        "skipAudits": {
          "description": "If present, the run should skip this list of audits.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "throttling": {
          "$ref": "#/$defs/throttlingSettings",
          "description": "The throttling config settings."
        },
        "throttlingMethod": {
          "description": "The method used to throttle the network.",
          "enum": ["devtools", "provided", "simulate"],
          "type": "string"
        },
        "usePassiveGathering": {
          "description": "If set to true, gatherers should avoid any behavior that may be destructive to the page state. (e.g. extra navigations, resizing the viewport)",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "locale": {
      "enum": [
        "ar",
        "ar-XB",
        "bg",
        "ca",
        "cs",
        "da",
        "de",
        "el",
        "en",
        "en-AU",
        "en-GB",
        "en-IE",
        "en-IN",
        "en-SG",
        "en-US",
        "en-XA",
        "en-XL",
        "en-ZA",
        "es",
        "es-419",
        "es-AR",
        "es-BO",
        "es-BR",
        "es-BZ",
        "es-CL",
        "es-CO",
        "es-CR",
        "es-CU",
        "es-DO",
        "es-EC",
        "es-GT",
        "es-HN",
        "es-MX",
        "es-NI",
        "es-PA",
        "es-PE",
        "es-PR",
        "es-PY",
        "es-SV",
        "es-US",
        "es-UY",
        "es-VE",
        "fi",
        "fil",
        "fr",
        "gsw",
        "he",
        "hi",
        "hr",
        "hu",
        "id",
        "in",
        "it",
        "iw",
        "ja",
        "ko",
        "lt",
        "lv",
        "mo",
        "nb",
        "nl",
        "no",
        "pl",
        "pt",
        "pt-PT",
        "ro",
        "ru",
        "sk",
        "sl",
        "sr",
        "sr-Latn",
        "sv",
        "ta",
        "te",
        "th",
        "tl",
        "tr",
        "uk",
        "vi",
        "zh",
        "zh-HK",
        "zh-TW"
      ],
      "type": "string"
    },
    "outputMode": {
      "enum": ["csv", "html", "json"],
      "type": "string"
    },
    "recomputedLanternData": {
      "properties": {
        "additionalRttByOrigin": {
          "additionalProperties": {
            "type": "number"
          },
          "type": "object"
        },
        "serverResponseTimeByOrigin": {
          "additionalProperties": {
            "type": "number"
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "storageType": {
      "description": "Enum of possible storage types.",
      "enum": [
        "all",
        "appcache",
        "cache_storage",
        "cookies",
        "file_systems",
        "indexeddb",
        "interest_groups",
        "local_storage",
        "other",
        "service_workers",
        "shader_cache",
        "shared_storage",
        "storage_buckets",
        "websql"
      ],
      "type": "string"
    },
    "throttlingSettings": {
      "properties": {
        "cpuSlowdownMultiplier": {
          "description": "The amount of slowdown applied to the cpu (1/<cpuSlowdownMultiplier>).",
          "type": "number"
        },
        "downloadThroughputKbps": {
          "description": "The network download throughput in kilobits per second.",
          "type": "number"
        },
        "requestLatencyMs": {
          "description": "The network request latency in milliseconds.",
          "type": "number"
        },
        "rttMs": {
          "description": "The round trip time in milliseconds.",
          "type": "number"
        },
        "throughputKbps": {
          "description": "The network throughput in kilobits per second.",
          "type": "number"
        },
        "uploadThroughputKbps": {
          "description": "The network upload throughput in kilobits per second.",
          "type": "number"
        }
      },
      "type": "object"
    },
    "environment": {
      "properties": {
        "benchmarkIndex": {
          "description": "The benchmark index number that indicates rough device class.",
          "type": "number"
        },
        "credits": {
          "type": "object",
          "description": "The version of libraries with which these results were generated. Ex: axe-core."
        },
        "hostUserAgent": {
          "description": "The user agent string of the version of Chrome used.",
          "type": "string"
        },
        "networkUserAgent": {
          "description": "The user agent string that was sent over the network.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "fullPageScreenshot": {
      "properties": {
        "nodes": {
          "type": "object"
        },
        "screenshot": {
          "properties": {
            "data": {
              "description": "Base64 image data URL.",
              "type": "string"
            },
            "height": {
              "type": "number"
            },
            "width": {
              "type": "number"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "gatherMode": {
      "description": "Gather mode used to collect artifacts.",
      "enum": ["navigation", "snapshot", "timespan"],
      "type": "string"
    },
    "icuMessagePath": {
      "anyOf": [
        {
          "properties": {
            "path": {
              "type": "string"
            },
            "values": {
              "$ref": "#/$defs/Record<string,string|number>"
            }
          },
          "type": "object"
        },
        {
          "type": "string"
        }
      ],
      "description": "Info about an `LH.IcuMessage` value that was localized to a string when\nincluded in the LHR. Value is either a\n - path (`_.set()` style) into the original object where the message was replaced\n - those paths and a set of values that were inserted into the localized strings."
    },
    "icuMessagePaths": {
      "additionalProperties": {
        "items": {
          "$ref": "#/$defs/icuMessagePath"
        },
        "type": "array"
      },
      "description": "A representation of `LH.IcuMessage`s that were in an object (e.g. `LH.Result`)\nand have been replaced by localized strings. `LH.icuMessagePaths` provides a\nmapping that can be used to change the locale of the object again.\nKeyed by ids from the locale message json files, values are information on\nhow to replace the string if needed.",
      "type": "object"
    },
    "enitity": {
      "description": "An entity that's either recognized by third-party-web or made up by Lighthouse.",
      "properties": {
        "category": {
          "description": "Category name that the entity belongs to, if available.",
          "type": "string"
        },
        "homepage": {
          "description": "Homepage URL for a recognized entity, if available in third-party-web.",
          "type": "string"
        },
        "isFirstParty": {
          "description": "Is this entity the first party?",
          "type": "boolean"
        },
        "isUnrecognized": {
          "description": "Is this entity recognized by third-party-web?",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the entity. Maps to third-party-web unique name for recognized entities and a root domain name for the unrecognized.",
          "type": "string"
        },
        "origins": {
          "description": "List of origin strings that belong to this entity found in network records.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "measureEntry": {
      "properties": {
        "duration": {
          "type": "number"
        },
        "entryType": {
          "type": "string"
        },
        "gather": {
          "description": "Whether timing entry was collected during artifact gathering.",
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "startTime": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "stackPacks": {
      "description": "A pack of secondary audit descriptions to be used when a page uses a\nspecific technology stack, giving stack-specific advice for some of\nLighthouse's audits.",
      "properties": {
        "descriptions": {
          "type": "object",
          "description": "A set of descriptions for some of Lighthouse's audits, keyed by audit `id`."
        },
        "iconDataURL": {
          "description": "A base64 data url to be used as the stack pack's icon.",
          "type": "string"
        },
        "id": {
          "description": "The unique string ID for this stack pack.",
          "type": "string"
        },
        "title": {
          "description": "The title of the stack pack, to be displayed in the report.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "timing": {
      "properties": {
        "entries": {
          "items": {
            "$ref": "#/$defs/measureEntry"
          },
          "type": "array"
        },
        "total": {
          "type": "number"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "audits": {
      "$ref": "object",
      "description": "An object containing the results of the audits, keyed by the audits' `id` identifier."
    },
    "categories": {
      "$ref": "object",
      "description": "The top-level categories, their overall scores, and member audits."
    },
    "categoryGroups": {
      "$ref": "object",
      "description": "Descriptions of the groups referenced by CategoryMembers."
    },
    "configSettings": {
      "$ref": "#/$defs/configSettings",
      "description": "The config settings used for these results."
    },
    "entities": {
      "additionalProperties": false,
      "description": "All the origins encountered during this Lighthouse run, and information about what web property (aka \"entity\") they belong to. Won't be present for snapshot mode.",
      "patternProperties": {
        "^[0-9]+$": {
          "$ref": "#/$defs/enitity"
        }
      },
      "properties": {
        "length": {
          "type": "number"
        }
      },
      "type": "object"
    },
    "environment": {
      "$ref": "#/$defs/environment",
      "description": "Information about the environment in which Lighthouse was run."
    },
    "fetchTime": {
      "description": "The ISO-8601 timestamp of when the results were generated.",
      "type": "string"
    },
    "finalDisplayedUrl": {
      "description": "The URL displayed on the page after Lighthouse finishes.",
      "type": "string"
    },
    "finalUrl": {
      "description": "For historical reasons, this will always be the same as `mainDocumentUrl`.",
      "type": "string"
    },
    "fullPageScreenshot": {
      "$ref": "#/$defs/fullPageScreenshot",
      "description": "Screenshot taken of the full page, with node rects referencing audit results. If there was an error with collection, this is null. If disabled via the disableFullPageScreenshot setting, this is undefined."
    },
    "gatherMode": {
      "$ref": "#/$defs/gatherMode",
      "description": "Gather mode used to collect artifacts for this result."
    },
    "i18n": {
      "description": "Strings for the report and the record of all formatted string locations in the LHR and their corresponding source values.",
      "properties": {
        "icuMessagePaths": {
          "$ref": "#/$defs/icuMessagePaths",
          "description": "Optional because LR has many old LHRs that return nothing for this property."
        },
        "rendererFormattedStrings": {
          "type": "object"
        }
      },
      "type": "object"
    },
    "lighthouseVersion": {
      "description": "The version of Lighthouse with which these results were generated.",
      "type": "string"
    },
    "mainDocumentUrl": {
      "description": "URL of the last document request during a Lighthouse navigation. Will be `undefined` in timespan/snapshot.",
      "type": "string"
    },
    "requestedUrl": {
      "description": "The URL that Lighthouse initially navigated to. Will be `undefined` in timespan/snapshot.",
      "type": "string"
    },
    "runWarnings": {
      "description": "List of top-level warnings for this Lighthouse run.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "runtimeError": {
      "description": "A top-level error message that, if present, indicates a serious enough problem that this Lighthouse result may need to be discarded.",
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "stackPacks": {
      "description": "An array containing the result of all stack packs.",
      "items": {
        "$ref": "#/$defs/stackPacks"
      },
      "type": "array"
    },
    "timing": {
      "$ref": "#/$defs/timing",
      "description": "Execution timings for the Lighthouse run"
    },
    "userAgent": {
      "description": "The User-Agent string of the browser used run Lighthouse for these results.",
      "type": "string"
    }
  }
}
